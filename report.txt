===================================
CS 613 - Telnet-NDN Progress Report
===================================

Introduction
============
NDN stands for Named Data Networking, a project to redefine fundamental network architecture to meet the networking goals of the 21st century. Named data replaces traditional IP-based routing with a content-centric network model where each piece of information resides at a unique name. A content-centric model of information exchange adds greater opportunities for in-network storage (caching, etc.) and built in trust mechanisms through content signing and encryption.


Motivation
==========
Inetutils is the foundational library for countless application around the world and in space. One of the applications bundled in the inetutils library is telent, a program for remote command of a terminal. It is similar in functionality to SSH, but does not secure the channel. Telnet makes a perfect candidate for adaptation to Named Data Networking protocols due to its simplicity and lack of orthogonal requirements (security, etc). 

We propose a minimally-invasive replacement of socket method calls in inetutils with no disturbance to dependent applications. Furthermore, these socket replacement calls will be implemented in telnet as a model for named data networking in other bundled applications such as ftp. In addition, it will provide a useful metric for comparing named data viability versus traditional HTTP networking given that all application operations and constraints are the same, save which type of network is being utilized.


Implementation
==============

//Repository Organization and Implementation Goals
The standard inetutils library was forked from its mirrored location on GitHub for its adaptation to NDN. The project is currently a private repository, but will be available publicly at the end of class or upon your request. In addition, a separate repository houses C++ classes built for NDN web calls which mimick the underlying Socket connections inside applications such as Telnet (the focus of this project). 

The intermediate goal is to ensure that the interfaces to the NDN web calls were similar to the original ones. In this way, the code changed in applications like telnet is minimized to method signatures and include statements. The long term goal is for the interfaces to be the exact same. If this is achieved, it will mean that using HTTP networking or NDN networking will be a matter of package inclusion (a benefit of the straightforward inclusion style of C/C++) and no telnet application code will need to be changed. In the short term, however, it was deemed beneficial to pre-fix socket calls with "ndn" for ease of development and debugging. These method name changes are reflected in all telnet application files that require socket connections.

Telnet

Experimental Analysis
=====================
Experimental analysis will be conducted with Wireshark through the Wireshark NDN plugin. This will allow us to analyze network capacity, overhead, etc. relative to the original telnet application. In order to be able to observe packet flow, two Named Data Forwarder instances (or NFDs) are required. Otherwise, the traffic stays inside of the single NFD routing mechanisms and goes undetected by other tools.

The experimental analysis has not yet commenced, but is expected to shortly.


Work in Progress
================
Currently, the telnet client is issuing commands over NDN, with packets visibly flowing through the network via a separate program which watches the network. 


Related Work
============



Conclusion
==========

